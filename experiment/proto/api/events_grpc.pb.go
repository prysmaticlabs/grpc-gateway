// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	gateway "github.com/grpc-ecosystem/grpc-gateway/v2/proto/gateway"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	StreamEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (Events_StreamEventsClient, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) StreamEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (Events_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Events_serviceDesc.Streams[0], "/experiment.Events/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Events_StreamEventsClient interface {
	Recv() (*gateway.EventSource, error)
	grpc.ClientStream
}

type eventsStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventsStreamEventsClient) Recv() (*gateway.EventSource, error) {
	m := new(gateway.EventSource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	StreamEvents(*EventRequest, Events_StreamEventsServer) error
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) StreamEvents(*EventRequest, Events_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).StreamEvents(m, &eventsStreamEventsServer{stream})
}

type Events_StreamEventsServer interface {
	Send(*gateway.EventSource) error
	grpc.ServerStream
}

type eventsStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventsStreamEventsServer) Send(m *gateway.EventSource) error {
	return x.ServerStream.SendMsg(m)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "experiment.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Events_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "experiment/proto/api/events.proto",
}
